export declare class Event {
  /**
    * Checks all open displays for a Gdk.Event to process,to be processed on, fetching events from the windowing system if necessary. See Gdk.Display.get_event().
    * @returns the next Gdk.Event to be processed, or None if no events are pending. The returned Gdk.Event should be freed with Gdk.Event.free(). 
    */
  static get(): import('../Gdk').Event | null;
  /**
    * Sets the function to call to handle all events from GDK.
    * @param func the function to call to handle events from GDK.
    * @param data user data to pass to the function. 
    */
  static handlerSet(func: import('../Gdk').eventFunc, data: Object | null): void;
  /**
    * Creates a new event of the given type. All fields are set to 0.
    * @param type a Gdk.EventType
    * @returns a newly-allocated Gdk.Event. The returned Gdk.Event should be freed with Gdk.Event.free(). 
    */
  static new(type: import('../Gdk').EventType): import('../Gdk').Event;
  /**
    * If there is an event waiting in the event queue of some open display, returns a copy of it. See Gdk.Display.peek_event().
    * @returns a copy of the first Gdk.Event on some event queue, or None if no events are in any queues. The returned Gdk.Event should be freed with Gdk.Event.free(). 
    */
  static peek(): import('../Gdk').Event | null;
  /**
    * Request more motion notifies if event is a motion notify hint event.
    * @param event a valid Gdk.Event 
    */
  static requestMotions(event: import('../Gdk').EventMotion): void;
  /**
    * Copies a Gdk.Event, copying or incrementing the reference count of the resources associated with it (e.g. Gdk.Window’s and strings).
    * @returns a copy of self. The returned Gdk.Event should be freed with Gdk.Event.free(). 
    */
  copy(): import('../Gdk').Event;
  /**
    * Frees a Gdk.Event, freeing or decrementing any resources associated with it. Note that this function should only be called with events returned from functions such as Gdk.Event.peek(), Gdk.Event.get(), Gdk.Event.copy() and Gdk.Event.new(). 
    */
  free(): void;
  /**
    * Extract the axis value for a particular axis use from an event structure.
    * @param axisUse the axis use to look for
    * @returns True if the specified axis was found, otherwise False  value:location to store the value found 
    */
  getAxis(axisUse: import('../Gdk').AxisUse): [boolean, number];
  /**
    * Extract the button number from an event.
    * @returns True if the event delivered a button number  button:location to store mouse button number 
    */
  getButton(): [boolean, number];
  /**
    * Extracts the click count from an event.
    * @returns True if the event delivered a click count  click_count:location to store click count 
    */
  getClickCount(): [boolean, number];
  /**
    * Extract the event window relative x/y coordinates from an event.
    * @returns True if the event delivered event window coordinates  x_win:location to put event window x coordinate y_win:location to put event window y coordinate 
    */
  getCoords(): [boolean, number, number];
  /**
    * If the event contains a “device” field, this function will return it, else it will return None.
    * @returns a Gdk.Device, or None. 
    */
  getDevice(): import('../Gdk').Device | null;
  /**
    * If the event was generated by a device that supports different tools (eg. a tablet), this function will return a Gdk.DeviceTool representing the tool that caused the event. Otherwise, None will be returned.
    * @returns The current device tool, or None 
    */
  getDeviceTool(): import('../Gdk').DeviceTool;
  /**
    * If self if of type Gdk.EventType.TOUCH_BEGIN, Gdk.EventType.TOUCH_UPDATE, Gdk.EventType.TOUCH_END or Gdk.EventType.TOUCH_CANCEL, returns the Gdk.EventSequence to which the event belongs. Otherwise, return None.
    * @returns the event sequence that the event belongs to 
    */
  getEventSequence(): import('../Gdk').EventSequence;
  /**
    * Retrieves the type of the event.
    * @returns a Gdk.EventType 
    */
  getEventType(): import('../Gdk').EventType;
  /**
    * Extracts the hardware keycode from an event.
    * @returns True if the event delivered a hardware keycode  keycode:location to store the keycode 
    */
  getKeycode(): [boolean, number];
  /**
    * Extracts the keyval from an event.
    * @returns True if the event delivered a key symbol  keyval:location to store the keyval 
    */
  getKeyval(): [boolean, number];
  /**
    * #event: a Gdk.Event Returns whether this event is an ‘emulated’ pointer event (typically from a touch event), as opposed to a real one.
    * @returns True if this event is emulated 
    */
  getPointerEmulated(): boolean;
  /**
    * Extract the root window relative x/y coordinates from an event.
    * @returns True if the event delivered root window coordinates  x_root:location to put root window x coordinate y_root:location to put root window y coordinate 
    */
  getRootCoords(): [boolean, number, number];
  /**
    * Gets the keyboard low-level scancode of a key event.
    * @returns The associated keyboard scancode or 0 
    */
  getScancode(): number;
  /**
    * Returns the screen for the event. The screen is typically the screen for event->any.window, but for events such as mouse events, it is the screen where the pointer was when the event occurs - that is, the screen which has the root window to which event->motion.x_root and event->motion.y_root are relative.
    * @returns the screen for the event 
    */
  getScreen(): import('../Gdk').Screen;
  /**
    * Retrieves the scroll deltas from a Gdk.Event
    * @returns True if the event contains smooth scroll information  delta_x:return location for X delta delta_y:return location for Y delta 
    */
  getScrollDeltas(): [boolean, number, number];
  /**
    * Extracts the scroll direction from an event.
    * @returns True if the event delivered a scroll direction  direction:location to store the scroll direction 
    */
  getScrollDirection(): [boolean, import('../Gdk').ScrollDirection];
  /**
    * Returns the Gdk.Seat this event was generated for.
    * @returns The Gdk.Seat of this event 
    */
  getSeat(): import('../Gdk').Seat;
  /**
    * This function returns the hardware (slave) Gdk.Device that has triggered the event, falling back to the virtual (master) device (as in Gdk.Event.get_device()) if the event wasn’t caused by interaction with a hardware device. This may happen for example in synthesized crossing events after a Gdk.Window updates its geometry or a grab is acquired/released.
    * @returns a Gdk.Device, or None. 
    */
  getSourceDevice(): import('../Gdk').Device | null;
  /**
    * If the event contains a “state” field, puts that field in state. Otherwise stores an empty state (0). Returns True if there was a state field in the event. self may be None, in which case it’s treated as if the event had no state field.
    * @returns True if there was a state field in the event  state:return location for state 
    */
  getState(): [boolean, import('../Gdk').ModifierType];
  /**
    * Returns the time stamp from self, if there is one; otherwise returns Gdk.CURRENT_TIME. If self is None, returns Gdk.CURRENT_TIME.
    * @returns time stamp field from self 
    */
  getTime(): number;
  /**
    * Extracts the Gdk.Window associated with an event.
    * @returns The Gdk.Window associated with the event 
    */
  getWindow(): import('../Gdk').Window;
  /**
    * Check whether a scroll event is a stop scroll event. Scroll sequences with smooth scroll information may provide a stop scroll event once the interaction with the device finishes, e.g. by lifting a finger. This stop scroll event is the signal that a widget may trigger kinetic scrolling based on the current velocity.
    * @returns True if the event is a scroll stop event 
    */
  isScrollStopEvent(): boolean;
  /**
    * Appends a copy of the given event onto the front of the event queue for event->any.window’s display, or the default event queue if event->any.window is None. See Gdk.Display.put_event(). 
    */
  put(): void;
  /**
    * Sets the device for self to device. The event must have been allocated by GTK+, for instance, by Gdk.Event.copy().
    * @param device a Gdk.Device 
    */
  setDevice(device: import('../Gdk').Device): void;
  /**
    * Sets the device tool for this event, should be rarely used.
    * @param tool tool to set on the event, or None 
    */
  setDeviceTool(tool: import('../Gdk').DeviceTool | null): void;
  /**
    * Sets the screen for self to screen. The event must have been allocated by GTK+, for instance, by Gdk.Event.copy().
    * @param screen a Gdk.Screen 
    */
  setScreen(screen: import('../Gdk').Screen): void;
  /**
    * Sets the slave device for self to device.
    * @param device a Gdk.Device 
    */
  setSourceDevice(device: import('../Gdk').Device): void;
  /**
    * This function returns whether a Gdk.EventButton should trigger a context menu, according to platform conventions. The right mouse button always triggers context menus. Additionally, if Gdk.Keymap.get_modifier_mask() returns a non-0 mask for Gdk.ModifierIntent.CONTEXT_MENU, then the left mouse button will also trigger a context menu if this modifier is pressed.
    * @returns True if the event should trigger a context menu. 
    */
  triggersContextMenu(): boolean;
}

